@model WebUI.Models.Vehicle.VehicleDetailsViewModel
@using System.Security.Claims
@using System.Globalization
@{
    ViewData["Title"] = "Araç Detayları";
    var userRoles = User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
    var canEdit = userRoles.Any(r => r == "Admin" || r == "Vehicle_Edit");
    var canDelete = userRoles.Any(r => r == "Admin" || r == "Vehicle_Remove");

    var canEnforcementRecordsAdd = userRoles.Any(r => r == "Admin" || r == "EnforcementRecord_Add");
    var canEnforcementRecordsEdit = userRoles.Any(r => r == "Admin" || r == "EnforcementRecord_Edit");
    var canEnforcementRecordsRemove = userRoles.Any(r => r == "Admin" || r == "EnforcementRecord_Remove");
    var canEnforcementRecordsView = userRoles.Any(r => r == "Admin" || r == "EnforcementRecord_View");

    var canDocumentRecordsAdd = userRoles.Any(r => r == "Admin" || r == "Document_Add");
    var canDocumentRecordsEdit = userRoles.Any(r => r == "Admin" || r == "Document_Edit");
    var canDocumentRecordsRemove = userRoles.Any(r => r == "Admin" || r == "Document_Remove");
    var canDocumentRecordsView = userRoles.Any(r => r == "Admin" || r == "Document_View");

    var canImageRecordsAdd = userRoles.Any(r => r == "Admin" || r == "VehicleImage_Add");
    var canImageRecordsView = userRoles.Any(r => r == "Admin" || r == "VehicleImage_View");
    var canImageRecordsRemove = userRoles.Any(r => r == "Admin" || r == "VehicleImage_Remove");
}
@{
    var returnUrl = Context.Request.Query["returnUrl"].ToString();
    var targetUrl = !string.IsNullOrEmpty(returnUrl)
        ? returnUrl
        : Url.Action("Index", "Vehicle");
}
<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="card-title">Araç Detayları</h3>
        </div>
        <div class="d-flex flex-wrap gap-2">

            @if (!Model.ExitDate.HasValue || !Model.PaymentDetail.IsPay || !Model.TowingExpense.IsPaid)
            {
                <div class="btn-group">
                    <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        İşlemler
                    </button>
                    <ul class="dropdown-menu">
                        @if (!Model.ExitDate.HasValue)
                        {
                            <li>
                                <a class="dropdown-item" href="javascript:void(0);" onclick="deliverVehicle()">
                                    <i class="fas fa-handshake"></i> Teslim Et
                                </a>
                            </li>
                        }
                        @if (!Model.IsForSale)
                        {
                            <li>
                                <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#saleModal">
                                    <i class="fas fa-tag"></i> Satışa Çıkart
                                </a>
                            </li>
                        }

                        @if (!Model.TowingExpense.IsPaid)
                        {
                            <li>
                                <a class="dropdown-item" href="javascript:void(0);" data-bs-toggle="modal" data-bs-target="#towingExpenseModal">
                                    <i class="fas fa-truck"></i> Çekici Gider Kaydı
                                </a>
                            </li>
                            
                        }

                    </ul>
                </div>
            }
            <a href="@targetUrl" class="btn btn-secondary btn-sm">
                <i class="fas fa-arrow-left"></i> Listeye Dön
            </a>
            @if (canEdit)
            {
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary btn-sm">
                    <i class="fas fa-edit"></i> Düzenle
                </a>
            }
            @if (canDelete)
            {
                <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger btn-sm">
                    <i class="fas fa-trash"></i> Sil
                </a>
            }
        </div>
    </div>

    <!-- Satış Modal -->
    <div class="modal fade" id="saleModal" tabindex="-1" aria-labelledby="saleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="saleModalLabel">Araç Satışa Çıkart</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="saleForm" asp-action="SetForSale" method="post">
                    <div class="modal-body">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="saleDate" class="form-label">Satışa Çıkış Tarihi</label>
                            <input type="date" class="form-control" id="saleDate" name="saleDate" required>
                        </div>
                        <div class="mb-3">
                            <label for="salePrice" class="form-label">Satış Fiyatı</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="salePrice" name="salePrice" step="0.01" required>
                                <span class="input-group-text">₺</span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                        <button type="submit" class="btn btn-warning">
                            <i class="fas fa-tag"></i> Satışa Çıkart
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Ödeme Modal -->
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="paymentModalLabel">Ödeme Bilgileri</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="paymentForm" asp-action="SavePayment" method="post">

                    <input type="hidden" name="id" value="@Model.Id" />
                    <div class="modal-body">
                        <div class="row">
                            <div id="exitDateError" class="invalid-feedback" style="display: none;">
                                Çıkış tarihi giriş tarihinden önce olamaz!
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Giriş Tarihi</label>
                                <input type="text" class="form-control" value="@Model.EntryDate.ToString("dd.MM.yyyy HH:mm")" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Çıkış Tarihi</label>
                                <input type="datetime-local" class="form-control" id="exitDate" name="exitDate" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Toplam Gün</label>
                                <input type="text" class="form-control" id="totalDays" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Günlük Ücret</label>
                                <input type="text" class="form-control" id="dailyPrice" readonly>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label">Toplam Tutar</label>
                                <div class="input-group">
                                    <input type="text" class="form-control total-amount" id="totalAmount" name="totalAmount" readonly>
                                    <span class="input-group-text">₺</span>
                                </div>
                                <div class="form-check mt-2">
                                    <input class="form-check-input" type="checkbox" id="editTotalAmountCheck">
                                    <label class="form-check-label" for="editTotalAmountCheck">Tutarı düzenle</label>
                                </div>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label">Ödeme Tarihi</label>
                                <input type="datetime-local" class="form-control" id="paymentDate" name="paymentDate" required>
                                <div id="paymentDateError" class="invalid-feedback" style="display: none;">
                                    Ödeme tarihi bugünden ileri olamaz!
                                </div>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label">Açıklama</label>
                                <textarea class="form-control" id="description" name="description" rows="2"></textarea>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success w-100 mt-3" id="savePaymentBtn" disabled>Kaydet</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="card-body">
        <div class="plate-display">
            <div class="plate-number">
                <div class="plate-text">@Model.PlateNumber</div>
            </div>
        </div>
        @if (Model.PaymentDetail != null && Model.PaymentDetail.IsPay)
        {
            <div class="info-group mt-4">
                <h4 class="section-title">Ödeme Bilgileri</h4>
                <div class="row">
                    <div class="col-12">
                        @await Html.PartialAsync("_VehiclePaymentDetails", Model.PaymentDetail)
                    </div>
                </div>
            </div>
        }

        @if (Model.TowingExpense != null && Model.TowingExpense.IsPaid)
        {
            <div class="row">
                <div class="col-12">
                    @await Html.PartialAsync("_VehicleTowingExpenseDetails", Model.TowingExpense)
                </div>
            </div>
        }

        <div class="row mb-4">
            <div class="col-md-6">
                <div class="info-box">
                    <div class="info-label">Kayıt Eden</div>
                    <div class="info-value">
                        <i class="fas fa-user-plus me-2"></i>
                        @(Model.CreatedBy ?? "-")
                        <small class="text-muted ms-2">
                            (@(Model.CreatedDate?.ToString("dd.MM.yyyy HH:mm", CultureInfo.InvariantCulture) ?? "-"))
                        </small>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="info-box">
                    <div class="info-label">Son Güncelleyen</div>
                    <div class="info-value">
                        <i class="fas fa-user-edit me-2"></i>
                        @(Model.UpdatedBy ?? "-")
                        <small class="text-muted ms-2">
                            (@(Model.UpdatedDate?.ToString("dd.MM.yyyy HH:mm", CultureInfo.InvariantCulture) ?? "-"))
                        </small>
                    </div>
                </div>
            </div>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="row">
            <div class="col-md-6">
                <div class="info-group">
                    <h4 class="section-title">Araç Bilgileri</h4>
                    <dl class="row mb-0">
                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleOnwer)</dt>
                        <dd class="col-sm-8 info-value">@(Model.VehicleOnwer ?? "-")</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleOnwerIdentityNumber)</dt>
                        <dd class="col-sm-8 info-value">@(Model.VehicleOnwerIdentityNumber?.ToString() ?? "-")</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.BookSequenceNo)</dt>
                        <dd class="col-sm-8 info-value">@(Model.BookSequenceNo ?? "-")</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.LinkingTeamNumber)</dt>
                        <dd class="col-sm-8 info-value">@(Model.LinkingTeamNumber ?? "-")</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.EntryDate)</dt>
                        <dd class="col-sm-8 info-value">
                            <div class="d-flex align-items-center">
                                <span class="me-3">@Model.EntryDate.ToString("dd.MM.yyyy")</span>
                                <span class="badge bg-info">
                                    <i class="fas fa-clock me-1"></i>
                                    @Model.EntryDate.ToString("HH:mm")
                                </span>
                            </div>
                        </dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.ExitDate)</dt>
                        <dd class="col-sm-8 info-value">
                            @if (Model.ExitDate.HasValue)
                            {
                                <div class="d-flex align-items-center">
                                    <span class="me-3">@Model.ExitDate.Value.ToString("dd.MM.yyyy")</span>
                                    <span class="badge bg-info">
                                        <i class="fas fa-clock me-1"></i>
                                        @Model.ExitDate.Value.ToString("HH:mm")
                                    </span>
                                </div>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.MuhammenBedeli)</dt>
                        <dd class="col-sm-8 info-value">@(Model.MuhammenBedeli?.ToString("N0") ?? "-") TL</dd>
                    </dl>
                </div>
            </div>
            <div class="col-md-6">
                <div class="info-group">
                    <h4 class="section-title">Araç Özellikleri</h4>
                    <dl class="row mb-0">
                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.BranchName)</dt>
                        <dd class="col-sm-8 info-value">@Model.BranchName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleTypeName)</dt>
                        <dd class="col-sm-8 info-value">@Model.VehicleTypeName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleBrandName)</dt>
                        <dd class="col-sm-8 info-value">@Model.VehicleBrandName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleModelName)</dt>
                        <dd class="col-sm-8 info-value">@Model.VehicleModelName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleYearName)</dt>
                        <dd class="col-sm-8 info-value">@Model.VehicleYearName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.VehicleColorName)</dt>
                        <dd class="col-sm-8 info-value">@Model.VehicleColorName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.KeyLocationName)</dt>
                        <dd class="col-sm-8 info-value">@Model.KeyLocationName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.LinkingRegionName)</dt>
                        <dd class="col-sm-8 info-value">@Model.LinkingRegionName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.LinkingReasonName)</dt>
                        <dd class="col-sm-8 info-value">@Model.LinkingReasonName</dd>

                        <dt class="col-sm-4 info-label">@Html.DisplayNameFor(model => model.ParkLocationName)</dt>
                        <dd class="col-sm-8 info-value">@(Model.ParkLocationName ?? "-")</dd>
                    </dl>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.LinkingAdditionalInformation) || !string.IsNullOrEmpty(Model.Description))
        {
            <div class="info-group mt-4">
                <h4 class="section-title">Ek Bilgiler</h4>
                <div class="row">
                    @if (!string.IsNullOrEmpty(Model.LinkingAdditionalInformation))
                    {
                        <div class="col-md-6">
                            <div class="info-label">@Html.DisplayNameFor(model => model.LinkingAdditionalInformation)</div>
                            <div class="info-value">@Model.LinkingAdditionalInformation</div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="col-md-6">
                            <div class="info-label">@Html.DisplayNameFor(model => model.Description)</div>
                            <div class="info-value">@Model.Description</div>
                        </div>
                    }
                </div>
            </div>
        }

        @if (Model.IsForSale)
        {
            <div class="info-group mt-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="section-title mb-0">Satış Bilgileri</h4>
                    <div class="btn-group">
                        <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editSaleModal">
                            <i class="fas fa-edit"></i> Düzenle
                        </button>
                        <button type="button" class="btn btn-danger btn-sm" onclick="deleteSale()">
                            <i class="fas fa-trash"></i> Satışı İptal Et
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="info-label">@Html.DisplayNameFor(model => model.SaleDate)</div>
                        <div class="info-value">
                            <i class="fas fa-calendar-alt me-2"></i>
                            @(Model.SaleDate?.ToString("dd.MM.yyyy") ?? "-")
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="info-label">@Html.DisplayNameFor(model => model.SalePrice)</div>
                        <div class="info-value">
                            <i class="fas fa-tag me-2"></i>
                            @(Model.SalePrice?.ToString("N2") ?? "-") ₺
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (canEnforcementRecordsView)
        {
            <hr />

            <!-- İcra Kayıtları Tablosu -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>İcra Kayıtları</h4>
                        @if (canEnforcementRecordsAdd)
                        {
                            <a asp-action="AddEnforcementRecord" asp-route-vehicleId="@Model.Id" class="btn btn-primary btn-sm">
                                <i class="fas fa-plus"></i> Yeni İcra Kaydı Ekle
                            </a>
                        }
                    </div>
                    @if (!Model.EnforcementRecords.Any())
                    {
                        <div class="alert alert-info">Bu araç için kayıtlı icra kaydı bulunmamaktadır.</div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th>İcra Numarası</th>
                                        <th>İcra Dairesi</th>
                                        <th>Karar Tarihi</th>
                                        <th>İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.EnforcementRecords)
                                    {
                                        <tr>
                                            <td>@item.EnforcementNumber</td>
                                            <td>@item.EnforcementOfficeName</td>
                                            <td>@item.DecisionDate.ToString("dd.MM.yyyy")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    @if (canEnforcementRecordsEdit)
                                                    {
                                                        <a asp-action="EditEnforcementRecord" asp-route-id="@item.Id" class="btn btn-warning btn-sm" title="Düzenle">
                                                            <i class="fas fa-edit"></i>
                                                        </a>

                                                        @if (canEnforcementRecordsRemove)
                                                        {
                                                            <a asp-action="DeleteEnforcementRecord" asp-route-id="@item.Id" asp-route-vehicleId="@Model.Id"
                                                               class="btn btn-danger btn-sm" title="Sil" onclick="return confirm('Bu icra kaydını silmek istediğinize emin misiniz?')">
                                                                <i class="fas fa-trash"></i>
                                                            </a>
                                                        }


                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

        }


        <!-- Dökümanlar Tablosu -->
        @if (canDocumentRecordsView)
        {
            <hr />
            <div class="row mt-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Dökümanlar</h4>
                        @if (canDocumentRecordsAdd)
                        {
                            <a asp-action="AddDocument" asp-route-vehicleId="@Model.Id" class="btn btn-primary btn-sm">
                                <i class="fas fa-plus"></i> Yeni Döküman Ekle
                            </a>
                        }
                    </div>
                    @if (!Model.Documents.Any())
                    {
                        <div class="alert alert-info">Bu araç için kayıtlı döküman bulunmamaktadır.</div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th>Dosya Adı</th>
                                        <th>Yükleme Tarihi</th>
                                        <th>İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Documents)
                                    {
                                        <tr>
                                            <td>@item.Name</td>
                                            <td>@item.CreatedAt.ToString("dd.MM.yyyy")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a href="@item.FilePath" target="_blank" class="btn btn-info btn-sm" title="Görüntüle">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    @if (canDocumentRecordsRemove)
                                                    {
                                                        <a href="#" class="btn btn-danger btn-sm" title="Sil">
                                                            <i class="fas fa-trash"></i>
                                                        </a>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

        }


        <hr />


        @if (canImageRecordsView)
        {
            <!-- Resimler Bölümü -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Araç Resimleri</h4>
                        @if (canImageRecordsAdd)
                        {
                            <a asp-action="AddImage" asp-route-vehicleId="@Model.Id" class="btn btn-primary btn-sm">
                                <i class="fas fa-plus"></i> Yeni Resim Ekle
                            </a>
                        }
                    </div>
                    @if (!Model.Images.Any())
                    {
                        <div class="alert alert-info">Bu araç için kayıtlı resim bulunmamaktadır.</div>
                    }
                    else
                    {
                        <div class="row">
                            @foreach (var item in Model.Images)
                            {
                                <div class="col-md-3 mb-4">
                                    <div class="card h-100">
                                        <div class="image-container" style="position: relative; width: 100%; height: 200px; overflow: hidden;">
                                            <img src="@item.FilePath" class="card-img-top" alt="Araç Resmi"
                                                 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: contain; cursor: pointer; background-color: #f8f9fa;"
                                                 onclick="showImagePreview(this.src)">
                                        </div>
                                        <div class="card-body d-flex flex-column">
                                            <p class="card-text">Yüklenme: @item.UploadedAt.ToString("dd.MM.yyyy")</p>
                                            @if (canImageRecordsRemove)
                                            {
                                                <form asp-action="DeleteImage" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-danger w-100 btn-sm mt-auto" onclick="return confirm('Bu resmi silmek istediğinize emin misiniz?');">
                                                        <i class="fas fa-trash"></i> Sil
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Resim Önizleme Modal -->
            <div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Resim Önizleme</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body text-center" style="background-color: #f8f9fa;">
                            <img id="previewImage" src="" alt="Önizleme" style="max-width: 100%; max-height: 80vh; object-fit: contain;">
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

<!-- Satış Düzenleme Modal -->
<div class="modal fade" id="editSaleModal" tabindex="-1" aria-labelledby="editSaleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSaleModalLabel">Satış Bilgilerini Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editSaleForm" asp-action="UpdateSale" method="post">
                <div class="modal-body">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <div class="mb-3">
                        <label for="editSaleDate" class="form-label">Satışa Çıkış Tarihi</label>
                        <input type="date" class="form-control" id="editSaleDate" name="saleDate" value="@Model.SaleDate?.ToString("yyyy-MM-dd")" required>
                    </div>
                    <div class="mb-3">
                        <label for="editSalePrice" class="form-label">Satış Fiyatı</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="editSalePrice" name="salePrice" value="@Model.SalePrice" step="0.01" required>
                            <span class="input-group-text">₺</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save"></i> Kaydet
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Çekici Gider Kaydı Modal -->
<div class="modal fade" id="towingExpenseModal" tabindex="-1" aria-labelledby="towingExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="towingExpenseModalLabel">Çekici Gider Kaydı</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="towingExpenseForm" asp-action="SaveTowingExpense" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Çekici Ödeme Tarihi</label>
                            <input type="datetime-local" class="form-control" id="towingDate" name="towingDate" required>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Tutar</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="towingAmount" name="towingAmount" step="0.01" required>
                                <span class="input-group-text">₺</span>
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Açıklama</label>
                            <textarea class="form-control" id="towingDescription" name="towingDescription" rows="2"></textarea>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success w-100 mt-3" id="saveTowingExpenseBtn">Kaydet</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        [data-theme-version="dark"] .plate-number::before {
            color: white;
        }

        [data-theme-version="dark"] .info-group {
            background: #17171e;
        }

        [data-theme-version="dark"] .card-body {
            background: #212130;
        }

        [data-theme-version="dark"] .info-box {
            background: #17171e;
        }

        [data-theme-version="dark"] thead > tr > th {
            background: #17171e;
        }

        [data-theme-version="dark"] .plate-display {
            background: #17171e;
        }

        [data-theme-version="dark"] .plate-number {
            background: #212130;
        }

        [data-theme-version="dark"] .plate-text {
            background: #212130;
            color: white;
        }

        [data-theme-version="dark"] .card-header {
            background: #212130;
        }

        [data-theme-version="dark"] .info-value {
            color: white;
        }

        .plate-display {
            text-align: center;
            padding: 30px;
            margin-bottom: 30px;
            display: flex;
            justify-content: center;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }

        .plate-number {
            background: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            padding: 10px 20px;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            min-width: 220px;
        }

            .plate-number::before {
                content: "T.C.";
                position: absolute;
                top: 3px;
                left: 8px;
                font-size: 0.7rem;
                font-weight: bold;
                color: #000;
            }

            .plate-number::after {
                content: "";
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(45deg, transparent 48%, #000 49%, #000 51%, transparent 52%);
                background-size: 15px 15px;
                opacity: 0.1;
                pointer-events: none;
            }

        .plate-text {
            font-family: 'Arial', sans-serif;
            font-size: 1.8rem;
            font-weight: bold;
            letter-spacing: 2px;
            color: #000;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.1);
            background: #fff;
            padding: 3px 10px;
            border-radius: 3px;
            display: inline-block;
        }

        .card {
            border: none;
            box-shadow: 0 0 20px rgba(0,0,0,0.05);
            border-radius: 15px;
        }

        .card-header {
            background: #fff;
            border-bottom: 1px solid #e9ecef;
            padding: 1.5rem;
            border-radius: 15px 15px 0 0 !important;
        }

        .card-body {
            padding: 2rem;
        }

        .section-title {
            color: #2c3e50;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 2px solid #e9ecef;
        }

        .info-group {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .info-label {
            color: #6c757d;
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .info-value {
            color: #2c3e50;
            font-size: 1rem;
            font-weight: 500;
        }

        .table {
            border-radius: 10px;
            overflow: hidden;
        }

            .table thead th {
                background: #f8f9fa;
                border-bottom: 2px solid #e9ecef;
                color: #2c3e50;
                font-weight: 600;
            }

        .btn-group .btn {
            border-radius: 6px;
            margin: 0 2px;
        }

        .image-container {
            transition: transform 0.2s;
        }

            .image-container:hover {
                transform: scale(1.02);
            }

        .badge {
            padding: 0.5em 0.75em;
            font-weight: 500;
        }

        .alert {
            border-radius: 10px;
            border: none;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .info-box {
            background: #fff;
            border-radius: 8px;
            padding: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
        }

            .info-box .info-label {
                color: #6c757d;
                font-size: 0.875rem;
                font-weight: 500;
                margin-bottom: 0.5rem;
            }

            .info-box .info-value {
                color: #2c3e50;
                font-size: 1rem;
                font-weight: 500;
                display: flex;
                align-items: center;
            }

                .info-box .info-value i {
                    color: #0d6efd;
                }

                .info-box .info-value small {
                    font-size: 0.875rem;
                }

        .payment-modal-content {
            padding: 24px 16px;
            background: #fff;
            border-radius: 18px;
            max-width: 420px;
            margin: 0 auto;
        }

        .modal-title {
            font-size: 1.3rem;
            font-weight: 700;
            color: #3d4ed1;
            margin-bottom: 18px;
            text-align: center;
        }

        .form-group {
            margin-bottom: 18px;
        }

            .form-group label {
                font-weight: 500;
                color: #6b7280;
                margin-bottom: 6px;
                display: block;
            }

        .form-control {
            border-radius: 10px;
            border: 1px solid #e5e7eb;
            padding: 10px 14px;
            font-size: 1rem;
            background: #f9fafb;
            color: #22223b;
            transition: border-color 0.2s;
        }

            .form-control:focus {
                border-color: #3d4ed1;
                background: #fff;
                outline: none;
            }

            .form-control.readonly {
                background: #f3f4f6;
                color: #6b7280;
            }

        .input-group {
            display: flex;
            align-items: center;
        }

        .input-group-text {
            background: #f3f4f6;
            border: 1px solid #e5e7eb;
            border-radius: 0 10px 10px 0;
            padding: 10px 16px;
            font-size: 1rem;
            color: #3d4ed1;
        }

        .total-amount {
            font-weight: 700;
            color: #3d4ed1;
            background: #eef2ff;
        }

        .btn-success {
            background: #3d4ed1;
            border: none;
            font-weight: 600;
            font-size: 1.1rem;
            border-radius: 10px;
            padding: 12px 0;
            transition: background 0.2s;
        }

            .btn-success:hover {
                background: #2739a6;
            }

        @@media (min-width: 768px) {
            #paymentForm .row > .col-md-6 {
                display: flex;
                flex-direction: column;
                justify-content: flex-end;
            }
        }


        div#exitDateError {
            padding: 10px;
            background: red;
            color: white;
            font-weight: 800;
            text-align: center;
            border-radius: 7px;
            margin-bottom: 20px;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // AntiForgeryToken'ı al
        function getToken() {
            return $('input[name="__RequestVerificationToken"]').val();
        }

        // AJAX isteklerinde token'ı ekle
        $.ajaxSetup({
            headers: {
                'RequestVerificationToken': getToken()
            }
        });

        // Resim önizleme fonksiyonu
        function showImagePreview(src) {
            const previewImage = document.getElementById('previewImage');
            previewImage.src = src;
            const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
            modal.show();
        }

        // Araç teslim etme fonksiyonu
        function deliverVehicle() {
            var hasPayment = @((Model.PaymentDetail != null && Model.PaymentDetail.IsPay).ToString().ToLower());
            if (hasPayment) {
                Swal.fire('Uyarı', 'Bu araç için önceden ödeme alınmış!', 'warning');
                return;
            }
            const hasEnforcementRecords = @Model.EnforcementRecords.Any().ToString().ToLower();
            if (hasEnforcementRecords) {
                Swal.fire({
                    title: 'Dikkat!',
                    text: 'Bu araç için icra kaydı bulunmaktadır. Yine de teslim etmek istiyor musunuz?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Evet, Teslim Et',
                    cancelButtonText: 'İptal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        showPaymentModal();
                    }
                });
            } else {
                showPaymentModal();
            }
        }

        function showPaymentModal() {
            // Ödeme hesaplama
            const entryDate = '@Model.EntryDate.ToString("yyyy-MM-ddTHH:mm")';
            const exitDate = new Date().toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:mm
            const isForSale = @Model.IsForSale.ToString().ToLower();
            const vehicleId = @Model.Id;

            // Ücret hesaplama
            $.ajax({
                url: '@Url.Action("CalculatePayment", "Vehicle")',
                type: 'POST',
                data: {
                    vehicleId: vehicleId,
                    entryDate: entryDate,
                    exitDate: exitDate,
                    isForSale: isForSale,
                    __RequestVerificationToken: getToken()
                },
                success: function (response) {
                    if (response.success) {
                        $('#totalDays').val(response.totalDays);
                        $('#dailyPrice').val(response.dailyPrice.toFixed(2));
                        $('#totalAmount').val(response.totalAmount.toFixed(2));

                        // Modal'ı göster
                        const paymentModal = new bootstrap.Modal(document.getElementById('paymentModal'));
                        paymentModal.show();
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: response.message || 'Ücret hesaplanırken bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Ücret hesaplanırken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            });
        }

        // Ödeme formu submit
        $('#paymentForm').on('submit', function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: 'Ödeme bilgileri başarıyla kaydedildi.',
                            icon: 'success'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: response.message || 'Bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'İşlem sırasında bir hata oluştu.',
                        icon: 'error'
                    });
                }
            });
        });

        // Satış formu submit
        $('#saleForm').on('submit', function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: 'Araç başarıyla satışa çıkarıldı.',
                            icon: 'success'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: response.message || 'Bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'İşlem sırasında bir hata oluştu.',
                        icon: 'error'
                    });
                }
            });
        });

        // Satış düzenleme formu submit
        $('#editSaleForm').on('submit', function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: 'Satış bilgileri başarıyla güncellendi.',
                            icon: 'success'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: response.message || 'Bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'İşlem sırasında bir hata oluştu.',
                        icon: 'error'
                    });
                }
            });
        });

        // Satış silme fonksiyonu
        function deleteSale() {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Satış bilgileri kalıcı olarak silinecek!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Evet, Sil',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteSale", "Vehicle")',
                        type: 'POST',
                        data: {
                            id: @Model.Id,
                            __RequestVerificationToken: getToken()
                        },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire({
                                    title: 'Başarılı!',
                                    text: 'Satış bilgileri başarıyla silindi.',
                                    icon: 'success'
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: response.message || 'Bir hata oluştu.',
                                    icon: 'error'
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                title: 'Hata!',
                                text: 'İşlem sırasında bir hata oluştu.',
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        }

        $(document).on('click', '#confirmDeletePaymentBtn', function (e) {
            e.preventDefault();
            $.ajax({
                url: '/Vehicle/DeletePayment',
                type: 'POST',
                data: {
                    vehicleId: '@ViewBag.VehicleId',
                    __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val()
                },
                success: function (response) {
                    if (response.success) {
                        $('#deletePaymentModal').modal('hide');
                        Swal.fire('Başarılı!', 'Ödeme kaydı silindi.', 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Hata!', response.message || 'Bir hata oluştu.', 'error');
                    }
                },
                error: function () {
                    Swal.fire('Hata!', 'İşlem sırasında bir hata oluştu.', 'error');
                }
            });
        });

        function validatePaymentForm() {
            var entryDate = '@Model.EntryDate.ToString("yyyy-MM-ddTHH:mm")';
            var exitDate = $('#exitDate').val();
            var paymentDate = $('#paymentDate').val();
            var now = new Date();
            var nowStr = now.getFullYear() + '-' +
                (now.getMonth() + 1).toString().padStart(2, '0') + '-' +
                now.getDate().toString().padStart(2, '0') + 'T' +
                now.getHours().toString().padStart(2, '0') + ':' +
                now.getMinutes().toString().padStart(2, '0');
            var nowInput = new Date(nowStr);

            var exitValid = true;
            var paymentValid = true;

            // Çıkış tarihi kontrolü
            if (!exitDate || new Date(exitDate) <= new Date(entryDate)) {
                $('#exitDate').addClass('is-invalid');
                $('#exitDateError').show();
                exitValid = false;
            } else {
                $('#exitDate').removeClass('is-invalid');
                $('#exitDateError').hide();
            }

            // Ödeme tarihi kontrolü (sadece ileri bir dakika seçilirse uyarı ver)
            if (new Date(paymentDate).getTime() > nowInput.getTime()) {
                $('#paymentDate').addClass('is-invalid');
                $('#paymentDateError').show();
                paymentValid = false;
            } else {
                $('#paymentDate').removeClass('is-invalid');
                $('#paymentDateError').hide();
            }

            // Buton durumu
            $('#savePaymentBtn').prop('disabled', !(exitValid && paymentValid));
        }

        // Çıkış tarihi değişince hem validasyon hem hesaplama
        $(document).on('input change', '#exitDate', function () {
            validatePaymentForm();
            // Sadece validasyon geçerliyse ve boş değilse hesaplama yap
            if (!$('#exitDate').hasClass('is-invalid') && $('#exitDate').val()) {
                var entryDate = '@Model.EntryDate.ToString("yyyy-MM-ddTHH:mm")';
                var exitDate = $('#exitDate').val();
                var isForSale = '@Model.IsForSale.ToString().ToLower()';
                $.ajax({
                    url: '/Vehicle/CalculatePayment',
                    type: 'POST',
                    data: {
                        vehicleId: '@Model.Id',
                        entryDate: entryDate,
                        exitDate: exitDate,
                        isForSale: isForSale,
                        __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            $('#totalDays').val(response.totalDays);
                            $('#dailyPrice').val(response.dailyPrice.toFixed(2));
                            $('#totalAmount').val(response.totalAmount.toFixed(2));
                        }
                    }
                });
            }
        });

        // Ödeme tarihi değişince sadece validasyon
        $(document).on('input change', '#paymentDate', validatePaymentForm);

        // Modal açıldığında alanları güncel saatle doldur ve kontrol et
        $(document).on('shown.bs.modal', '#paymentModal', function () {
            var now = new Date();
            var year = now.getFullYear();
            var month = (now.getMonth() + 1).toString().padStart(2, '0');
            var day = now.getDate().toString().padStart(2, '0');
            var hour = now.getHours().toString().padStart(2, '0');
            var minute = now.getMinutes().toString().padStart(2, '0');
            var formattedDate = `${year}-${month}-${day}T${hour}:${minute}`;
            $('#exitDate').val(formattedDate);
            $('#paymentDate').val(formattedDate);
            validatePaymentForm();
        });

        // Tutarı düzenle checkbox kontrolü
        $(document).on('change', '#editTotalAmountCheck', function () {
            if ($(this).is(':checked')) {
                $('#totalAmount').prop('readonly', false);
            } else {
                $('#totalAmount').prop('readonly', true);
            }
        });

        // Çekici gider kaydı formu submit
        $('#towingExpenseForm').on('submit', function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: 'Çekici gider kaydı başarıyla eklendi.',
                            icon: 'success'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: response.message || 'Bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'İşlem sırasında bir hata oluştu.',
                        icon: 'error'
                    });
                }
            });
        });

        // Modal açıldığında tarihi güncelle
        $(document).on('shown.bs.modal', '#towingExpenseModal', function () {
            var now = new Date();
            var year = now.getFullYear();
            var month = (now.getMonth() + 1).toString().padStart(2, '0');
            var day = now.getDate().toString().padStart(2, '0');
            var hour = now.getHours().toString().padStart(2, '0');
            var minute = now.getMinutes().toString().padStart(2, '0');
            var formattedDate = `${year}-${month}-${day}T${hour}:${minute}`;
            $('#towingDate').val(formattedDate);
        });
    </script>
} 